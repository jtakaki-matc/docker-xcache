---
name: Build release series tagged images

on:
  push:
    branches:
      - dockerxcache-testing
  #pull_request:
    #branches:
      #- '**'
  repository_dispatch:
    types:
      - dispatch-build
  workflow_dispatch:

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    if: contains(fromJson('["push", "repository_dispatch", "workflow_dispatch"]'), github.event_name) && startsWith(github.repository, 'opensciencegrid/')
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
    - name: make date tag
      id: mkdatetag
      run: echo "::set-output name=dtag::$(date +%Y%m%d-%H%M)"
  
  image-builds:
    name: xcache:${{ matrix.osg_series }}-${{ matrix.repo }} image build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        image: [atlas-xcache, cms-xcache, stash-cache, stash-origin]
        repo: ['development', 'testing', 'release']
        osg_series: ['3.6']
    steps:

      - uses: actions/checkout@v2

      
          
      - name: Build xcache base image
        uses: docker/build-push-action@v2.2.2
        with:
          context: ./xcache
          build-args: |
            BASE_YUM_REPO=${{ matrix.repo }}
            BASE_OSG_SERIES=${{ matrix.osg_series }}
          pull: True
          load: True
          tags: xcache:latest

      - name: Generate tag list
        id: generate-tag-list
        env:
          REPO: ${{ matrix.repo }}
          SERIES: ${{ matrix.osg_series }}
          IMAGE: ${{ matrix.image }}
          TIMESTAMP: ${{ needs.make-date-tag.outputs.dtag }}
        run: |
          docker_repo=opensciencegrid/$IMAGE
          tag_list=()
          for registry in hub.opensciencegrid.org docker.io; do
            for image_tag in "$SERIES-$REPO" "$SERIES-$REPO-$TIMESTAMP"; do
              tag_list+=("$registry/$docker_repo":"$image_tag")
            done
          done
          # This causes the tag_list array to be comma-separated below,
          # which is required for build-push-action
          IFS=,
          echo "::set-output name=taglist::${tag_list[*]}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
            
      - name: Log in to OSG Harbor
        uses: docker/login-action@v1
        with:
          registry: hub.opensciencegrid.org
          username: ${{ secrets.OSG_HARBOR_ROBOT_USER }}
          password: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}

      - name: Build xcache images
        uses: docker/build-push-action@v2.2.2
        with:
          context: ${{matrix.image}}
          build-args: |
            BASE_YUM_REPO=${{ matrix.repo }}
            BASE_OSG_SERIES=${{ matrix.osg_series }}

      - name: Load stash-cache image
        uses: docker/build-push-action@v2.2.2
        with:
          context: ./stash-cache
          build-args: |
            BASE_YUM_REPO=${{ matrix.repo }}
            BASE_OSG_SERIES=${{ matrix.osg_series }}
          load: True  # allow access to built images through the Docker CLI
          tags: stash-cache:latest

      - name: Load stash-origin image
        uses: docker/build-push-action@v2.2.2
        with:
          context: ./stash-origin
          build-args: |            
            BASE_YUM_REPO=${{ matrix.repo }}
            BASE_OSG_SERIES=${{ matrix.osg_series }}
          load: True  # allow access to built images through the Docker CLI
          tags: stash-origin:latest
        

      - run: ./tests/test_stashcache_origin.sh "stash-origin:latest"
      - run: ./tests/test_stashcache.sh "stash-cache:latest"

      - name: Build ${{ matrix.image}} image
        uses: docker/build-push-action@v2.2.2
        with:
          context: ${{matrix.image}}
          push: True
          build-args: |
            BASE_YUM_REPO=${{ matrix.repo }}
            BASE_OSG_SERIES=${{ matrix.osg_series }}
          tags: "${{ steps.generate-tag-list.outputs.taglist }}"
